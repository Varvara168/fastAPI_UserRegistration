from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
#from sqlalchemy.orm import Session -> AsyncSession

from app.database import get_db
from app.dependencies import get_current_user
from app.matching.crud import *
from app.models import User

router = APIRouter()

# –≠–Ω–¥–ø–æ–∏–Ω—Ç: —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id=user_id
@router.post("/match/{user_id}")
async def match_users(user_id: int, db: AsyncSession = Depends(get_db), current_user: User = Depends(get_current_user)):
    if user_id == current_user.id:
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –ª–∞–π–∫–Ω—É—Ç—å —Å–µ–±—è")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫
    # ... match_user() -> await match_user()
    like = await match_user(db, current_user.id, user_id)
    if like is None:
        return {"message": "–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
    mutual_like = await is_mutual_match(db, current_user.id, user_id)
    if mutual_like:
        return {"message": "–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫! –í—ã —Ç–µ–ø–µ—Ä—å —Å–æ–≤–ø–∞–ª–∏ ü•∞"}

    return {"message": "–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}
